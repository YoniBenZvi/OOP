Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'initialize-release' stamp: 'YBZ 11/7/2018 09:40'!initialize	exp := 0.	coef := 0! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:14'!coef	^coef! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:22'!coef: anInteger	(anInteger isInteger)		ifTrue: [			coef := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'lk 11/12/2018 13:31'!derivative	|mono|	mono := Monom new.	((self coef ~= 0) and: [self exp > 0])		ifTrue: [			mono coef: ((self coef) * (self exp)).			mono exp: (self exp - 1).			^mono		]		ifFalse: [			^mono		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:00'!exp	^exp! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:13'!exp: anInteger	((anInteger isInteger) and: [anInteger >= 0])		ifTrue: [			exp := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 17:17'!multiply: aMonom		(aMonom class ~= Monom)		ifTrue: [			self error: 'invalid input'		].		self coef: ((self coef) * (aMonom coef)).		self exp: ((self exp) + (aMonom exp)).! !!Monom methodsFor: 'printing' stamp: 'YBZ 11/8/2018 22:56'!printOn: aStream	|name|	name := ('M(x)= ', coef printString, 'x^', exp).	aStream nextPutAll: name! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'behavior' stamp: 'Y.B.Z 12/12/2018 16:40'!add: aPolyStream	|oldBlock oldBlock2|	(aPolyStream class = PolyStream)	ifTrue: [		oldBlock := aPolyStream block. "it is O(1) because we are copying a reference"		oldBlock2 := block.			block := [:x :filterSet |  (oldBlock value: x value: filterSet) + (oldBlock2 value: x value: filterSet)]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'YBZ 11/10/2018 23:33'!addCoef: coef withExp: exp	|oldBlock|	(((coef isInteger) and: [exp isInteger]) and: [exp >= 0])	ifTrue: [		oldBlock := block.		block := [ :x :filterSet | 				(filterSet includes: exp)				ifTrue: [oldBlock value:x value:filterSet.]				ifFalse: [(coef * (x raisedToInteger: exp)) + (oldBlock value:x value:filterSet)]			].	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:40'!block	^block! !!PolyStream methodsFor: 'behavior' stamp: 'YBZ 11/10/2018 19:13'!eval: anInteger	(anInteger isInteger)	ifFalse: [self error: 'invalid input'].	^(block value: anInteger value: Set new)! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/12/2018 13:38'!filter: aSet	|oldBlock tempSet|	oldBlock := block.	tempSet := aSet deepCopy. "it is ok because we assume that size(aSet)=O(1)"	block := [:x :filterSet |			filterSet addAll: tempSet.			oldBlock value: x value: filterSet.		]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/12/2018 13:18'!intersectionWith: aPolyStream withinRange: anInteger willUpdate: aBoolean	|i counter range interBlock poly currBlock1 currBlock2|	i := -1. counter := 0.5. range := anInteger. poly := aPolyStream.	(((aPolyStream class = PolyStream) and: [anInteger isInteger]) and: [aBoolean isKindOf: Boolean])	ifTrue: [ 		currBlock1 := self block. "it is ok because we are copying a reference, which is O(1)"		currBlock2 := poly block.		interBlock := [ ((counter floor) <= range)						ifTrue: [							|x polyVal1 polyVal2|							x := i * (counter floor).							(aBoolean)								ifTrue: [polyVal1 := self eval: x. 										polyVal2 := poly eval: x.]								ifFalse: [polyVal1 := currBlock1 value: x value: Set new.										polyVal2 := currBlock2 value: x value: Set new.].							(((polyVal1) - (polyVal2)) = 0)								ifTrue: [	x]								ifFalse: [									counter := counter + 0.5.									i := (-1) * i.									'wait for it...'								]							]						ifFalse: [self error: 'invalid input']			 ].			^interBlock	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 12:20'!multiplyBy: anInteger	|oldBlock|	(anInteger isInteger)	ifTrue: [		oldBlock := block.		block := [:x :filterSet | anInteger * (oldBlock value: x value: filterSet)]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 12:20'!substitute: anInteger	|oldBlock|	((anInteger isInteger) and: [anInteger ~= 0])	ifTrue: [		oldBlock := block.		block := [:x :filterSet | oldBlock value: (anInteger * x) value: filterSet]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'initialize-release' stamp: 'lk 11/10/2018 12:08'!initialize	block := [ :x :filterSet | 0 ].	! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:39'!add: aPolynom	|poly|	(aPolynom class = Polynom)	ifTrue: [		poly := Polynom new.		aPolynom monoms valuesDo: [ :elem | poly addMonom: elem ].		monoms valuesDo: [ :elem | poly addMonom: elem ].		^poly	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/10/2018 21:33'!addMonom: aMonom		(aMonom class ~= Monom)		ifTrue: [			self error: 'invalid input'		].		(aMonom coef ~= 0)		ifTrue: [			|mono|			mono := Monom new.			mono exp: (aMonom exp).			mono coef: (aMonom coef).			monoms at: (aMonom exp) ifAbsentPut: [mono].			((monoms at: (aMonom exp)) ~= mono)			ifTrue: [				monoms at: (aMonom exp) ifPresent: [ :x | x coef: (x coef + aMonom coef). monoms at: (aMonom exp) put: x].				(((monoms at: (aMonom exp)) coef) = 0)				ifTrue: [ monoms removeKey: (aMonom exp) ]			]		]	! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/10/2018 23:24'!asDictionary		|dict|		dict := Dictionary new.		monoms valuesDo: [ :elem | dict at: (elem exp) put: (elem coef)].		^dict				! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:49'!derivative	|arr poly|	arr := monoms values.	poly := Polynom new.	arr do: [ :elem | poly addMonom: elem derivative].	^poly	! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 15:18'!eval: anInteger	|value|	(anInteger isInteger)	ifTrue: [ 		value := 0.		monoms valuesDo: [ :elem | value := value + ((anInteger raisedToInteger: (elem exp))*(elem coef))].		^value	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:28'!monoms	^monoms! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 17:32'!multiplyByMonom: aMonom		|arr|		(aMonom class = Monom)		ifTrue: [			arr := monoms values.			monoms := Dictionary new.			arr do: [ :elem | elem multiply: aMonom. self addMonom: elem].		]		ifFalse: [			self error: 'invalid input'		]! !!Polynom methodsFor: 'initialize-release' stamp: 'YBZ 11/10/2018 23:14'!initialize	monoms := Dictionary new.	! !