Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'initialize-release' stamp: 'YBZ 11/7/2018 09:40'!initialize	exp := 0.	coef := 0! !!Monom methodsFor: 'printing' stamp: 'YBZ 11/8/2018 22:56'!printOn: aStream	|name|	name := ('M(x)= ', coef printString, 'x^', exp).	aStream nextPutAll: name! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:14'!coef	^coef! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:22'!coef: anInteger	(anInteger isInteger)		ifTrue: [			coef := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:07'!derivative	|mono|	mono := Monom new.	((self coef ~= 0) and: [self exp > 0])		ifTrue: [			mono exp: (self exp - 1).			mono coef: ((self coef) * (self exp)).			^mono		]		ifFalse: [			^mono		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:00'!exp	^exp! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:13'!exp: anInteger	((anInteger isInteger) and: [anInteger >= 0])		ifTrue: [			exp := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 17:17'!multiply: aMonom		(aMonom class ~= Monom)		ifTrue: [			self error: 'invalid input'		].		self coef: ((self coef) * (aMonom coef)).		self exp: ((self exp) + (aMonom exp)).! !TestCase subclass: #MonomTest	instanceVariableNames: 'a'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:39'!setUp	a := Monom new.	a exp: 2.	a coef: 5.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 16:59'!testBasic	self assert:		((a exp = 2) and: (a coef = 5)). "a is initialized with exp=2 and coef=5 in setUp"	a:= a derivative.	self assert: 		((a exp = 1) and: (a coef = 10)).			a:= a derivative.	self assert:		((a exp = 0) and: (a coef = 10)).			a:=a derivative.	self assert:		((a exp = 0) and: (a coef = 0)).			! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:13'!testValidArgsCoef1	self should: [a coef: $d.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:10'!testValidArgsCoef2	self should: [a coef: 'fdas'.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:10'!testValidArgsCoef3	self should: [a coef: 431.5423.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:11'!testValidArgsExp1	self should: [a exp: -1.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:11'!testValidArgsExp2	self should: [a exp: $d.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:11'!testValidArgsExp3	self should: [a exp: 'gfsa'.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 13:11'!testValidArgsExp4	self should: [a exp: 154.5423.] raise: Error.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:45'!validArgsCoef1	a coef: $d.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:45'!validArgsCoef2	a coef: 'fdas'.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:45'!validArgsCoef3	a coef: 431.5423.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:44'!validArgsExp1	a exp: -1.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:44'!validArgsExp2	a exp: $d.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:44'!validArgsExp3	a exp: 'gfsa'.! !!MonomTest methodsFor: 'testing' stamp: 'lk 11/7/2018 12:44'!validArgsExp4	a exp: 154.5423.! !TestCase subclass: #PolyBlockTest	instanceVariableNames: 'pb1 pb2 pb3 pb4 pb5'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyBlockTest methodsFor: 'testing' stamp: 'lk 11/10/2018 12:21'!testAdd	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	pb1 add: pb2.	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	pb3 add: pb1.	self assert: ((pb3 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	pb1 := PolyStream new.	pb2 := PolyStream new.	pb3 := PolyStream new.	pb1 addCoef: 3 withExp: 2.	pb1 addCoef: 1 withExp: 0.	pb1 addCoef: 2 withExp: 0.	pb1 addCoef: 3 withExp: 0.	pb1 addCoef: 4 withExp: 0.	pb1 addCoef: 5 withExp: 0.	pb1 addCoef: 6 withExp: 0.	pb1 addCoef: 7 withExp: 0. "P(x) = 3x2+28"	pb2 addCoef: -2 withExp: 2.	pb2 addCoef: -1 withExp: 0.	pb2 addCoef: -2 withExp: 0.	pb2 addCoef: -3 withExp: 0.	pb2 addCoef: -4 withExp: 0.	pb2 addCoef: -5 withExp: 0.	pb2 addCoef: -6 withExp: 0.	pb2 addCoef: 20 withExp: 0. "P(x) = (-2)x2+(-1)"		pb2 add: pb1. "P(x) = 1x2+27"	self assert: ((pb1 eval: 2) = 40). "P(x) = 3x2+28"	self assert: ((pb2 eval: 0) = 27). "P(x) = 1x2+27"	self assert: ((pb2 eval: 1) = 28). "P(x) = 1x2+27"	self assert: ((pb2 eval: -1) = 28). "P(x) = 1x2+27"	pb2 addCoef: -27 withExp: 0.	pb3 add: pb2. "P(x) = 1x2"	self assert: ((pb1 eval: 0) = 28). "P(x) = 3x2+28"	self assert: ((pb2 eval: 2) = 4). "P(x) =1x2"	self assert: ((pb3 eval: 0) = 0). "P(x) = 1x2"	self assert: ((pb3 eval: 6) = 36). "P(x) = 1x2"	self assert: ((pb3 eval: -10) = 100). "P(x) = 1x2"	self assert: ((pb3 eval: 100) = 10000). "P(x) = 1x2"	pb3 addCoef: -2 withExp: 2. "P(x) = (-1)x2"	self assert: ((pb1 eval: 0) = 28). "P(x) = 3x2+28"	self assert: ((pb2 eval: 2) = 4). "P(x) =1x2"	self assert: ((pb3 eval: 0) = 0). "P(x) = (-1)x2"	self assert: ((pb3 eval: 6) = -36). "P(x) = (-1)x2"	self assert: ((pb3 eval: -10) = -100). "P(x) = (-1)x2"	self assert: ((pb3 eval: 100) = -10000). "P(x) = (-1)x2"! !!PolyBlockTest methodsFor: 'testing' stamp: 'guy 3/31/2017 10:47'!testAddCoefWithExp	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	pb1 addCoef: 3 withExp: 2.	pb1 addCoef: 1 withExp: 0.	pb1 addCoef: 2 withExp: 0.	pb1 addCoef: 3 withExp: 0.	pb1 addCoef: 4 withExp: 0.	pb1 addCoef: 5 withExp: 0.	pb1 addCoef: 6 withExp: 0.	pb1 addCoef: 7 withExp: 0. "P(x) = 3x2+28"	self assert: ((pb1 eval: 0) = 28).	self assert: ((pb1 eval: 1) = 31).	pb2 addCoef: 1 withExp: 0.	pb2 addCoef: -1 withExp: 1.	pb2 addCoef: 1 withExp: 2.	pb2 addCoef: -1 withExp: 3.	pb2 addCoef: 1 withExp: 4.	pb2 addCoef: -1 withExp: 5.	pb2 addCoef: 1 withExp: 6.	pb2 addCoef: -1 withExp: 7. "P(x) = (-1)x7+1x6+(-1)x5+1x4+(-1)x3+1x2+(-1)x+1"	self assert: ((pb2 eval: 0) = 1).	self assert: ((pb2 eval: 1) = 0).	self assert: ((pb2 eval: -1) = 8).	pb2 addCoef: 1 withExp: 1.	pb2 addCoef: -1 withExp: 2.	pb2 addCoef: 1 withExp: 3.	pb2 addCoef: -1 withExp: 4.	pb2 addCoef: 1 withExp: 5.	pb2 addCoef: -1 withExp: 6.	pb2 addCoef: 1 withExp: 7. "P(x) = 1"	self assert: ((pb2 eval: 42) = 1).	self assert: ((pb2 eval: 1984) = 1).	self assert: ((pb2 eval: 31415) = 1).! !!PolyBlockTest methodsFor: 'testing' stamp: 'lk 11/10/2018 16:39'!testFilter	|fSet fSet2|	fSet := Set new.	fSet2 := Set new.	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"		pb1 addCoef: 1 withExp: 1. "P(x) = 1x"	pb2 addCoef: 2 withExp: 2. "P(x) = 2x2"	pb3 addCoef: 3 withExp: 3. "P(x) = 3x3"	pb4 addCoef: 0 withExp: 4. "P(x) = 0"		fSet add:1.	pb1 filter: fSet.	"P(x) = 0"	pb2 filter: fSet. "P(x) = 2x2"	pb3 filter: fSet. "P(x) = 3x3"	pb4 filter: fSet. "P(x) = 0"		self assert: ((pb1 eval: 1) = 0).		self assert: ((pb1 eval: 236709) = 0).	self assert: ((pb1 eval: -234419) = 0).		self assert: ((pb2 eval: 1) = 2).	self assert: ((pb2 eval: 2) = 8).		self assert: ((pb2 eval: 3) = 18).	self assert: ((pb3 eval: 1) = 3).		self assert: ((pb3 eval: 2) = 24).	self assert: ((pb3 eval: 3) = 81).	self assert: ((pb4 eval: 1) = 0).		self assert: ((pb4 eval: 236709) = 0).	self assert: ((pb4 eval: -234419) = 0).		fSet add:2.			"make sure that changes in set doesn't change the polyStream"	self assert: ((pb1 eval: 1) = 0).		self assert: ((pb1 eval: 236709) = 0).	self assert: ((pb1 eval: -234419) = 0).		self assert: ((pb2 eval: 1) = 2).	self assert: ((pb2 eval: 2) = 8).		self assert: ((pb2 eval: 3) = 18).	self assert: ((pb3 eval: 1) = 3).		self assert: ((pb3 eval: 2) = 24).	self assert: ((pb3 eval: 3) = 81).	self assert: ((pb4 eval: 1) = 0).		self assert: ((pb4 eval: 236709) = 0).	self assert: ((pb4 eval: -234419) = 0).		"make sure that filter doesn't affect future additions"	pb1 addCoef: 1 withExp: 1. "P(x) = 1x"	pb2 addCoef: 2 withExp: 1. "P(x) = 2x+2x^2"	pb3 addCoef: 3 withExp: 1. "P(x) = 3x+3x^3"	self assert: ((pb1 eval: 1) = 1).		self assert: ((pb1 eval: 236709) = 236709).	self assert: ((pb1 eval: -234419) = -234419).		self assert: ((pb2 eval: 1) = 4).	self assert: ((pb2 eval: 2) = 12).		self assert: ((pb2 eval: 3) = 24).	self assert: ((pb3 eval: 1) = 6).		self assert: ((pb3 eval: 2) = 30).	self assert: ((pb3 eval: 3) = 90).			pb1 filter: fSet.	"P(x) = 0"	pb2 filter: fSet. "P(x) = 0"	pb3 filter: fSet. "P(x) = 3x3"	pb4 filter: fSet. "P(x) = 0"	self assert: ((pb1 eval: 1) = 0).		self assert: ((pb1 eval: 236709) = 0).	self assert: ((pb1 eval: -234419) = 0).		self assert: ((pb2 eval: 1) = 0).	self assert: ((pb2 eval: 2) = 0).		self assert: ((pb2 eval: 3) = 0).	self assert: ((pb3 eval: 1) = 3).		self assert: ((pb3 eval: 2) = 24).	self assert: ((pb3 eval: 3) = 81).	self assert: ((pb4 eval: 1) = 0).		self assert: ((pb4 eval: 236709) = 0).	self assert: ((pb4 eval: -234419) = 0).		fSet2 add:3.	pb3 filter: fSet2.	self assert: ((pb3 eval: 1) = 0).	self assert: ((pb3 eval: 2) = 0).		self assert: ((pb3 eval: 3) = 0).		self assert: ((pb3 eval: 236709) = 0).	self assert: ((pb3 eval: -234419) = 0).	! !!PolyBlockTest methodsFor: 'testing' stamp: 'lk 11/10/2018 13:21'!testMultiplyBy	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	pb1 multiplyBy: 0.	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	pb3 multiplyBy: 0.	self assert: ((pb3 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	pb1 := PolyStream new.	pb2 := PolyStream new.	pb3 := PolyStream new.	pb1 addCoef: 1 withExp: 1.	pb1 addCoef: 1 withExp: 2.	pb1 addCoef: 1 withExp: 3.	pb1 addCoef: 1 withExp: 4. "P(x) = 1x4 + 1x3 + 1x2 + 1x"	pb2 addCoef: 3 withExp: 0. "P(x) = 3"		pb2 multiplyBy: 3. "P(x) = 9"	self assert: ((pb1 eval: 1) = 4). "P(x) = 1x4 + 1x3 + 1x2 + 1x"	self assert: ((pb2 eval: 0) = 9). "P(x) = 9"	self assert: ((pb2 eval: 1) = 9). "P(x) = 9"	self assert: ((pb2 eval: -1) = 9). "P(x) = 9"		pb1 := PolyStream new.	pb2 := PolyStream new.	pb1 addCoef: 1 withExp: 1.	pb1 addCoef: 1 withExp: 2.	pb1 addCoef: 1 withExp: 3.	pb1 addCoef: 1 withExp: 4. "P(x) = 1x4 + 1x3 + 1x2 + 1x"	pb2 addCoef: 3 withExp: 0. "P(x) = 3"		pb1 multiplyBy: 3. "P(x) = 3x4 + 3x3 + 3x2 + 3x"	self assert: ((pb2 eval: 1984) = 3). "P(x) = 3"	self assert: ((pb1 eval: 0) = 0). "P(x) = 3x4 + 3x3 + 3x2 + 3x"	self assert: ((pb1 eval: 1) = 12). "P(x) = 3x4 + 3x3 + 3x2 + 3x"	self assert: ((pb1 eval: -1) = 0). "P(x) = 3x4 + 3x3 + 3x2 + 3x"		pb3 addCoef: 1 withExp: 1. "P(x) = 1x"		pb3 multiplyBy: 3. "P(x) = 3x"	self assert: ((pb2 eval: 1984) = 3). "P(x) = 3"	self assert: ((pb3 eval: 0) = 0). "P(x) = 3x"	self assert: ((pb3 eval: 1) = 3). "P(x) = 3x"	self assert: ((pb3 eval: 2) = 6). "P(x) = 3x"	pb3 multiplyBy: 3. "P(x) = 9x"	self assert: ((pb2 eval: 1984) = 3). "P(x) = 3"	self assert: ((pb3 eval: 0) = 0). "P(x) = 9x"	self assert: ((pb3 eval: -1) = -9). "P(x) = 9x"	self assert: ((pb3 eval: -2) = -18). "P(x) = 9x"	pb3 := PolyStream new.	pb3  addCoef: -9 withExp: 2.	pb3 multiplyBy: -9. "P(x) = 81x2"	self assert: ((pb3 eval: 0) = 0). "P(x) = 81x2"	self assert: ((pb3 eval: 1) = 81). "P(x) = 81x2"	self assert: ((pb3 eval: -2) = 324). "P(x) = 81x2"! !!PolyBlockTest methodsFor: 'testing' stamp: 'lk 11/10/2018 14:18'!testSubtitute	pb1 substitute: 2.	pb2 substitute: -4.	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"	pb1 substitute: 2.	pb2 substitute: -4.	self assert: ((pb1 eval: 1984) = 0). "P(x) = 0"	self assert: ((pb2 eval: 1984) = 0). "P(x) = 0"		pb1 addCoef: 1 withExp: 1. "P(x) = 1x"	pb2 addCoef: 2 withExp: 2. "P(x) = 2x2"	pb3 addCoef: 3 withExp: 3. "P(x) = 3x3"	pb4 addCoef: 0 withExp: 4. "P(x) = 0"		pb1 substitute: 5. "P(x) = 5x"	self assert: ((pb1 eval: 1984) = (5* 1984)).	pb2 substitute: 5. "P(x) = 50x^2"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 50).	self assert: ((pb2 eval: -1) = 50).	self assert: ((pb2 eval: 2) = 200).	self assert: ((pb2 eval: -2) = 200).	pb3 substitute: 2. "P(x) = 24x^3"	self assert: ((pb3 eval: 0) = 0).	self assert: ((pb3 eval: 1) = 24).	self assert: ((pb3 eval: -1) = -24).	self assert: ((pb3 eval: 2) = 192).	self assert: ((pb3 eval: -2) = -192).	self should: [pb4 substitute: 0. ] raise: Error.		pb1 := PolyStream new.			pb1 addCoef: 1 withExp: 1. "P(x) = 1x"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 1).	self assert: ((pb1 eval: -1) = -1).	pb1 substitute: 2.			"P(x) = 2x"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 2).	self assert: ((pb1 eval: -1) = -2).	pb1 addCoef: 2 withExp: 2. "P(x) = 2x+2x^2"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 4).	self assert: ((pb1 eval: -1) = 0).	pb1 substitute: 2.			"P(x) = 4x+8x^2"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 12).	self assert: ((pb1 eval: -1) = 4).	pb1 addCoef: 3 withExp: 3. "P(x) = 4x+8x^2+3x^3"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 15).	self assert: ((pb1 eval: -1) = 1).	pb1 substitute: 2.			"P(x) = 8x+32x^2+24x^3"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 64).	self assert: ((pb1 eval: -1) = 0).	pb1 addCoef: 0 withExp: 4. "P(x) = 8x+32x^2+24x^3"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 64).	self assert: ((pb1 eval: -1) = 0).	pb1 substitute: 2.			"P(x) = 16x+128x^2+192x^3"	self assert: ((pb1 eval: 0) = 0).	self assert: ((pb1 eval: 1) = 336).	self assert: ((pb1 eval: -1) = -80).	pb1 addCoef: 5 withExp: 0. "P(x) = 5+16x+128x^2+192x^3"	self assert: ((pb1 eval: 0) = 5).	self assert: ((pb1 eval: 1) = 341).	self assert: ((pb1 eval: -1) = -75).	pb1 substitute: 2.			"P(x) = 5+32x+512x^2+1536x^3"		self assert: ((pb1 eval: 0) = 5).	self assert: ((pb1 eval: 1) = 2085).	self assert: ((pb1 eval: -1) = -1051).	self assert: ((pb1 eval: 236) = 20218101125).	self assert: ((pb1 eval: 709) = 547689068709).			pb2 := PolyStream new.	pb2 addCoef: 1 withExp: 1. "P(x) = 1x"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 1).	self assert: ((pb2 eval: -1) = -1).	pb2 substitute: -1.			"P(x) = -x"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = -1).	self assert: ((pb2 eval: -1) = 1).	pb2 addCoef: 2 withExp: 2. "P(x) = -x+2x^2"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 1).	self assert: ((pb2 eval: -1) = 3).	pb2 substitute: -1.			"P(x) = x+2x^2"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 3).	self assert: ((pb2 eval: -1) = 1).	pb2 addCoef: 3 withExp: 3. "P(x) = x+2x^2+3x^3"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 6).	self assert: ((pb2 eval: -1) = -2).	pb2 substitute: -1.			"P(x) = -x+2x^2-3x^3"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = -2).	self assert: ((pb2 eval: -1) = 6).	pb2 addCoef: 0 withExp: 4. "P(x) = -x+2x^2-3x^3"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = -2).	self assert: ((pb2 eval: -1) = 6).	pb2 substitute: -1.			"P(x) = x+2x^2+3x^3"	self assert: ((pb2 eval: 0) = 0).	self assert: ((pb2 eval: 1) = 6).	self assert: ((pb2 eval: -1) = -2).	pb5 addCoef: 5 withExp: 0.	self assert: ((pb5 eval: 0) = 5).	pb5 substitute: 3.	self assert: ((pb5 eval: 1) = 5).	pb5 substitute: -17.	self assert: ((pb5 eval: -1) = 5).	pb5 substitute: -234319.	self assert: ((pb5 eval: 236709) = 5).	pb5 substitute: 236709.	self assert: ((pb5 eval: -234319) = 5).	! !!PolyBlockTest methodsFor: 'initialize-release' stamp: 'lk 11/10/2018 12:05'!setUp	pb1 := PolyStream new.	pb2 := PolyStream new.	pb3 := PolyStream new.	pb4 := PolyStream new.	pb5 := PolyStream new.	! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 12:19'!add: aPolyStream	|oldBlock|	(aPolyStream class = PolyStream)	ifTrue: [		oldBlock := block.		block := [:x :filterSet | (oldBlock value: x value: filterSet) + (aPolyStream block value: x value: filterSet)]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 16:13'!addCoef: coef withExp: exp	|oldBlock|	(((coef isInteger) and: [exp isInteger]) and: [exp >= 0])	ifTrue: [		oldBlock := block.		block := [:x :filterSet | 			(filterSet includes: exp)			ifFalse: [coef * (x raisedToInteger: exp) +(oldBlock value:x value:filterSet).]			ifTrue: [oldBlock value:x value:filterSet.]			].	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:40'!block	^block! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 10:50'!eval: anInteger	(anInteger isInteger)	ifFalse: [self error: 'invalid input'].	^block value: anInteger value: Set new! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 16:37'!filter: aSet	|oldBlock tempSet|	oldBlock := block.	tempSet := aSet deepCopy. "it is ok because we assume that size(aSet)=O(1)"	block := [:x :filterSet |		filterSet addAll: tempSet.		oldBlock value: x value: filterSet.		]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 12:20'!multiplyBy: anInteger	|oldBlock|	(anInteger isInteger)	ifTrue: [		oldBlock := block.		block := [:x :filterSet | anInteger * (oldBlock value: x value: filterSet)]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'behavior' stamp: 'lk 11/10/2018 12:20'!substitute: anInteger	|oldBlock|	((anInteger isInteger) and: [anInteger ~= 0])	ifTrue: [		oldBlock := block.		block := [:x :filterSet | oldBlock value: (anInteger * x) value: filterSet]	]	ifFalse: [		self error: 'invalid input'	]! !!PolyStream methodsFor: 'initialize-release' stamp: 'lk 11/10/2018 12:08'!initialize	block := [ :x :filterSet | 0 ].	! !TestCase subclass: #PolyTest	instanceVariableNames: 'a dict1'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 15:55'!preparePoly	"turns a into the polynom x^3+3x^2+6x+6"	|b|	b := Monom new.	b exp: 3.	b coef: 1.	a addMonom: b.	b := b derivative.	a addMonom: b.	b := b derivative.	a addMonom: b.	b := b derivative.	a addMonom: b.! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/7/2018 18:13'!setUp	a := Polynom new.	dict1 := Dictionary new.! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 15:53'!testAddMonomAdv	|b|	self preparePoly.	dict1 at: 0 put: 6.	dict1 at: 1 put: 6.	dict1 at: 2 put: 3.	dict1 at:3 put: 1.	b := Monom new.	a addMonom: b.	self assert:		(a asDictionary = dict1).	b exp: 3.	b coef: -1.	a addMonom: b.	dict1 removeKey: 3.	self assert:		(a asDictionary = dict1).	a addMonom: b derivative.	dict1 removeKey: 2.	self assert:		(a asDictionary = dict1).	a addMonom: b derivative.	dict1 at: 2 put: -3.	self assert:		(a asDictionary = dict1).	! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 15:41'!testAddMonomSimple	|b dict|	b:= Monom new.	b exp: 1.	b coef: 1.	a addMonom: b.	dict := Dictionary new.	dict at: 1 put: 1.	self assert:		(a asDictionary = dict)	! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 15:42'!testAddMonomValidArgs	self should: [a addMonom: 1.] raise: Error.	self should: [a addMonom: 1.6543.] raise: Error.	self should: [a addMonom: $1.] raise: Error.	self should: [a addMonom: 'dgfs'.] raise: Error.	self should: [a addMonom: dict1.] raise: Error.	! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 15:41'!testAddSimple	|b dict|	b:= Monom new.	b exp: 1.	b coef: 1.	a addMonom: b.	dict := Dictionary new.	dict at: 1 put: 1.	self assert:		(a asDictionary = dict)	! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/7/2018 17:38'!testAsDictSimple	|empDict|	empDict := Dictionary new.	self assert: 		(a asDictionary = empDict).! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/7/2018 18:42'!testBasicTest	|b dict2|	b:= Monom new.	b exp: 1.	b coef: 1.	a addMonom: b.	b exp: 2.	a addMonom: b.	b exp: 3.	a addMonom: b.	dict1 at: 1 put: 1.	dict1 at: 2 put: 1.	dict1 at: 3 put: 1.	self assert:		(a asDictionary = dict1).	a := a derivative.	dict1 at: 0 put: 1.	dict1 at: 1 put: 2.	dict1 at: 2 put: 3.	dict1 removeKey: 3.	dict2 := a asDictionary.	self assert:		(a asDictionary = dict1).! !!PolyTest methodsFor: 'testing' stamp: 'lk 11/9/2018 17:41'!testMulByMonom	|b dict|	self preparePoly.	dict := Dictionary new.	b := Monom new.	b exp: 1.	b coef: 1.	a multiplyByMonom: b.	dict1 at: 1 put: 6.	dict1 at: 2 put: 6.	dict1 at: 3 put: 3.	dict1 at: 4 put: 1.	self assert:		(a asDictionary = dict1).	a multiplyByMonom: b derivative.	self assert:		(a asDictionary = dict1).	a multiplyByMonom: Monom new.	self assert:		(a asDictionary = Dictionary new).	self preparePoly.	dict at: 0 put: 6;at: 1 put: 6; at:2 put:3; at:3 put:1.	dict1 := a asDictionary.	self assert:		(dict1 = dict).	b coef: -1.	a multiplyByMonom: b.	dict1 := Dictionary new.	dict1 at: 1 put: -6.	dict1 at: 2 put: -6.	dict1 at: 3 put: -3.	dict1 at: 4 put: -1.	dict := a asDictionary.	self assert:		(dict = dict1)! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:39'!add: aPolynom	|poly|	(aPolynom class = Polynom)	ifTrue: [		poly := Polynom new.		aPolynom monoms valuesDo: [ :elem | poly addMonom: elem ].		monoms valuesDo: [ :elem | poly addMonom: elem ].		^poly	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 17:34'!addMonom: aMonom		(aMonom class ~= Monom)		ifTrue: [			self error: 'invalid input'		].		(aMonom coef ~= 0)		ifTrue: [			|mono|			mono := Monom new.			mono exp: (aMonom exp).			mono coef: (aMonom coef).			monoms at: (aMonom exp) ifAbsentPut: [mono].			((monoms at: (aMonom exp)) ~= mono)			ifTrue: [				monoms at: (aMonom exp) ifPresent: [ :x | x coef: (x coef + aMonom coef). monoms at: (aMonom exp) put: x].			]		]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:43'!asDictionary		|coefSum dict|		dict := Dictionary new.		coefSum := 0.		monoms valuesDo: [ :elem | coefSum := coefSum + elem coef].		(coefSum = 0)		ifTrue: [			^dict		]		ifFalse: [			monoms valuesDo: [ :elem | 				(elem coef ~= 0)				ifTrue: [					dict at: (elem exp) put: (elem coef)				]			].			^dict		]				! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:49'!derivative	|arr poly|	arr := monoms values.	poly := Polynom new.	arr do: [ :elem | poly addMonom: elem derivative].	^poly	! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 15:18'!eval: anInteger	|value|	(anInteger isInteger)	ifTrue: [ 		value := 0.		monoms valuesDo: [ :elem | value := value + ((anInteger raisedToInteger: (elem exp))*(elem coef))].		^value	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:28'!monoms	^monoms! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/9/2018 17:32'!multiplyByMonom: aMonom		|arr|		(aMonom class = Monom)		ifTrue: [			arr := monoms values.			monoms := Dictionary new.			arr do: [ :elem | elem multiply: aMonom. self addMonom: elem].		]		ifFalse: [			self error: 'invalid input'		]! !!Polynom methodsFor: 'initialize-release' stamp: 'YBZ 11/7/2018 09:56'!initialize	monoms := Dictionary new.	monoms at: 0 put: Monom new.	! !TestCase subclass: #PolynomTest	instanceVariableNames: 'p1 p2 p3 i1 i2 i3 m6 m34 m26 mn71 m50 m00 m71 m08 m18 m05 iter m1 m2 iter1 mn26'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolynomTest methodsFor: 'testing' stamp: 'YBZ 11/9/2018 14:33'!testAdd	|dict dict2|	dict2 := Dictionary new.	p1 addMonom: m34.	p3 := p1 add: p2.	dict := p3 asDictionary.	dict2 at: 4 put: 3.	self assert: (dict = dict2).	p3 := p2 add: p1.	dict := p3 asDictionary.	self assert: (dict = dict2).	((p1 addMonom: m26) addMonom: m71) addMonom: m50.	p3 :=  p3 add: p1.	dict := p3 asDictionary.	dict2 := Dictionary new.	dict2 at: 0 put: 5; at: 1 put: 7; at: 4 put: 6; at: 6 put: 2.	self assert: (dict = dict2). 	p1 := Polynom new.	p1 addMonom: m26.	p2 addMonom: mn26.	p3 := p1 add: p2.	dict := p3 asDictionary.	self assert: (dict = Dictionary new). 	p3 := p2 add: p1.	dict := p3 asDictionary.	self assert: (dict = Dictionary new).! !!PolynomTest methodsFor: 'testing' stamp: 'YBZ 11/9/2018 14:44'!testAddMonom	|dict|	dict := Dictionary new.	p1 addMonom: m34.	dict at: 4 put: 3.	self assert: (p1 asDictionary = dict).	p1 addMonom: m26.	dict at: 6 put: 2.	self assert: (p1 asDictionary = dict).	p1 addMonom: mn71.	dict at: 1 put: -7.	self assert: (p1 asDictionary = dict).	p1 addMonom: m50.	dict at: 0 put: 5.	self assert: (p1 asDictionary = dict).	p1 addMonom: m00.	self assert: (p1 asDictionary = dict).	p1 addMonom: m71.	dict removeKey: 1.	self assert: (p1 asDictionary = dict).	p1 addMonom: m34.	dict at: 4 put: 6.	self assert: (p1 asDictionary = dict).	p1 addMonom: m08.	self assert: (p1 asDictionary = dict).! !!PolynomTest methodsFor: 'testing' stamp: 'omer sd 3/30/2017 22:37'!testAsDictionary	|dict|	dict := p1 asDictionary.	self assert: (dict isKindOf: Dictionary).	self assert: (dict size = 0).	(((p1 addMonom: m34) addMonom: m26) addMonom: mn71) addMonom: m50.	dict := p1 asDictionary.	self assert: (dict size = 4).	self assert: ((dict at: 4) = 3).	self assert: ((dict at: 6) = 2).	self assert: ((dict at: 1) = -7).	self assert: ((dict at: 0) = 5).	self assert: ((dict includes: 42) = false).! !!PolynomTest methodsFor: 'testing' stamp: 'YBZ 11/9/2018 15:13'!testEval	|dict|	self assert: ((p1 eval: 42) = 0).	self assert: ((p1 eval: 42) = (p1 eval: 1984)).	(((((p1 addMonom: m34) addMonom: m50) addMonom: mn71) addMonom: m08) addMonom: m18) addMonom: mn71.	dict := Dictionary new.	dict at: 0 put: 5; at: 1 put: -14; at:4 put: 3; at: 8 put: 1.	self assert: (p1 asDictionary = dict).	dict := p1 eval: 0.	self assert: ((p1 eval: 0) = 5).	self assert: ((p1 eval: 1) = -5).	self assert: ((p1 eval: -1) = 23).	self assert: ((p1 eval: 10) = 100029865).! !!PolynomTest methodsFor: 'testing' stamp: 'YBZ 11/9/2018 15:21'!testInit	|dict|	dict := Dictionary new.	self assert: (p1 asDictionary = dict).	! !!PolynomTest methodsFor: 'testing' stamp: 'YBZ 11/9/2018 17:36'!testMultiplyByMonom	|dict|	p1 multiplyByMonom: m34. "P(x) = 0"	dict := Dictionary new.	self assert: (p1 asDictionary = dict).	p1 addMonom: m34.	p1 multiplyByMonom: m00. "P(x) = 0"	self assert: (p1 asDictionary = dict).	p1 addMonom: m34.	p1 addMonom: m34.	p1 addMonom: mn71.	p1 addMonom: m50.	p1 addMonom: m50.	p1 multiplyByMonom: m34.	dict at: 4 put: 30; at: 5 put: -21; at:8 put: 18.	self assert: (p1 asDictionary = dict).	p1 multiplyByMonom: mn71.	dict := Dictionary new.	dict at: 5 put: -210; at: 6 put: 147; at:9 put: -126.	self assert: (p1 asDictionary = dict).	p1 multiplyByMonom: m50.	dict := Dictionary new.	dict at: 5 put: -1050; at: 6 put: 735; at:9 put: -630.	self assert: (p1 asDictionary = dict).	p1 multiplyByMonom: m18.	dict := Dictionary new.	dict at: 13 put: -1050; at: 14 put: 735; at:17 put: -630.	self assert: (p1 asDictionary = dict).! !!PolynomTest methodsFor: 'initialize-release' stamp: 'Omer 3/31/2017 20:53'!setUp	p1 := Polynom new.	p2 := Polynom new.	p3 := Polynom new.	m34 := Monom new.	m34 coef: 3 ; exp: 4.	m26 := Monom new.	m26 coef: 2 ; exp: 6.	mn26 := Monom new.	mn26 coef: -2 ; exp: 6.	mn71 := Monom new.	mn71 coef: -7 ; exp: 1.	m50 := Monom new.	m50 coef: 5 ; exp: 0.	m00 := Monom new.	m00 coef: 0 ; exp: 0.	m71 := Monom new.	m71 coef: 7 ; exp: 1.	m08 := Monom new.	m08 coef: 0 ; exp: 8.	m18 := Monom new.	m18 coef: 1 ; exp: 8.! !