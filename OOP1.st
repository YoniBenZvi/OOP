Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:14'!coef	^coef! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:22'!coef: anInteger	(anInteger isInteger)		ifTrue: [			coef := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:07'!derivative	|mono|	mono := Monom new.	((self coef ~= 0) and: [self exp > 0])		ifTrue: [			mono exp: (self exp - 1).			mono coef: ((self coef) * (self exp)).			^mono		]		ifFalse: [			^mono		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/6/2018 22:00'!exp	^exp! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:13'!exp: anInteger	((anInteger isInteger) and: [anInteger >= 0])		ifTrue: [			exp := anInteger.		]		ifFalse: [			self error: 'invalid input'		]! !!Monom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 12:42'!multiply: aMonom		self coef: (self coef * aMonom coef).		self exp: (self exp + aMonom exp).! !!Monom methodsFor: 'printing' stamp: 'YBZ 11/6/2018 23:17'!printOn: aStream|name|name := (self class name , ' ', coef printString, 'x^', exp).aStream nextPutAll: name! !!Monom methodsFor: 'initialize-release' stamp: 'YBZ 11/7/2018 09:40'!initialize	exp := 0.	coef := 0! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:39'!add: aPolynom	|poly|	(aPolynom class = Polynom)	ifTrue: [		poly := Polynom new.		aPolynom monoms valuesDo: [ :elem | poly addMonom: elem ].		monoms valuesDo: [ :elem | poly addMonom: elem ].		^poly	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:57'!addMonom: aMonom		(aMonom class = Monom)		ifTrue: [			|mono|			mono := Monom new.			mono exp: [aMonom exp] value.			mono coef: [aMonom coef] value.			monoms at: (aMonom exp) ifAbsentPut: [mono].			((monoms at: (aMonom exp)) ~= mono)			ifTrue: [				monoms at: (aMonom exp) ifPresent: [ :x | x coef: (x coef + aMonom coef). monoms at: (aMonom exp) put: x].			]		]		ifFalse: [			self error: 'invalid input'		]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:43'!asDictionary		|coefSum dict|		dict := Dictionary new.		coefSum := 0.		monoms valuesDo: [ :elem | coefSum := coefSum + elem coef].		(coefSum = 0)		ifTrue: [			^dict		]		ifFalse: [			monoms valuesDo: [ :elem | 				(elem coef ~= 0)				ifTrue: [					dict at: (elem exp) put: (elem coef)				]			].			^dict		]				! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:51'!derivative	|arr poly|	arr := monoms values.	poly := Polynom new.	arr do: [ :elem | elem derivative. poly addMonom: elem].	^poly	! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:12'!eval: anInteger	|value|	(anInteger isInteger)	ifTrue: [ 		value := 0.		monoms valuesDo: [ :elem | value := value + (anInteger raisedTo: (elem exp))*(elem coef)].		^value	]	ifFalse: [		self error: 'invalid input'	]! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 17:28'!monoms	^monoms! !!Polynom methodsFor: 'behavior' stamp: 'YBZ 11/7/2018 18:13'!multiplyByMonom: aMonom		(aMonom class = Monom)		ifTrue: [			monoms valuesDo: [ :elem | elem multiply: aMonom].		]		ifFalse: [			self error: 'invalid input'		]! !!Polynom methodsFor: 'initialize-release' stamp: 'YBZ 11/7/2018 09:56'!initialize	monoms := Dictionary new.	monoms at: 0 put: Monom new.	! !